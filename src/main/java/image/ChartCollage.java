package image;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import grabber.Grabber;
import util.ImageCollageCreator;
import util.PlaylistIDManager;

@SuppressWarnings("unused")
public class ChartCollage extends Collage {
    public static final int TITLE_HEIGHT = 180;
    public static final int FOOTER_HEIGHT = 60;

    public ChartCollage(int x, int y, ImageCollageCreator creator) {
        super(x, y, BufferedImage.TYPE_INT_RGB);
        COLLAGE_X = x;
        COLLAGE_Y = y;
        this.creator = creator;
    }

    Graphics g;

    public Collage drawImages(ArrayList<HashMap<String, String>> inputImages) throws IOException {
        g = getGraphics();

        int x = 0;
        int y = TITLE_HEIGHT;
        int i = 0;

        for (HashMap<String, String> image : inputImages) {
            String fileName = getFileName(image, ".jpg");
            Cover cover = doResize(new Cover(fileName));

            g.drawImage(cover.getImage(), x, y, null);
            x += cover.IMAGE_X;

            // draw detail section bar
            g.drawImage(cover.createDetailSection(image, Grabber.numOfTracks - i), x, y, null);

            x = 0;
            y += cover.IMAGE_Y;

            i++;
            setProgress((int) (50 + i * ((float) 50 / inputImages.size())));
        }

        drawTitle();
        drawFooter();

        return this;
    }

    private void resizeFontToDrawString(Graphics2D background, String str, Font font, int x, int y) {
        final String ellipsis = "...";
        FontRenderContext frc = new FontRenderContext(new AffineTransform(), true, true);
        background.setColor(Color.BLACK);

        int width = (int) font.getStringBounds(str, frc).getWidth();
        Font newFont = font;

        for (int i = 0; i < 2; i++) {
            if (width > COLLAGE_X - x * 2) {
                newFont = newFont.deriveFont((float)newFont.getSize() * 0.9f);
                width = (int) newFont.getStringBounds(str, frc).getWidth();
            }
        }

        if (width > COLLAGE_X - x * 2) {
            str = str.substring(0, str.length() - 4) + ellipsis;
            width = (int) newFont.getStringBounds(str, frc).getWidth();
            int ellipsisLen = (int) newFont.getStringBounds(ellipsis, frc).getWidth();

            while (width > COLLAGE_X - x * 2 - ellipsisLen) {
                str = str.substring(0, str.length() - 4) + ellipsis;
                width = (int) newFont.getStringBounds(str, frc).getWidth();
            }
        }

        background.setFont(newFont);
        background.drawString(str, x, y);
    }

    private void drawTitle() {
        String title = Grabber.playlistName;
        BufferedImage section = new BufferedImage(COLLAGE_X, TITLE_HEIGHT, BufferedImage.TYPE_INT_RGB);
        Graphics2D background = section.createGraphics();

        background.setColor(Color.WHITE);
        background.fillRect(0, 0, COLLAGE_X, TITLE_HEIGHT);

        Font font = new Font(Cover.EN_FONT, Font.BOLD, 70);

        resizeFontToDrawString(background, title, font, 10, 100);
        background.dispose();

        g.drawImage(section, 0, 0, null);
    }

    private void drawFooter() {
        BufferedImage section = new BufferedImage(COLLAGE_X, FOOTER_HEIGHT, BufferedImage.TYPE_INT_RGB);
        Graphics2D background = section.createGraphics();

        background.setColor(Color.white);
        background.fillRect(0, 1, COLLAGE_X, FOOTER_HEIGHT);
        background.dispose();

        Font font = new Font(Cover.EN_FONT, Font.PLAIN, 20);
        background = section.createGraphics();
        background.setColor(Color.BLACK);
        background.setFont(font);
        String softwareInfo = "Generated by Playlist Visualizor.";
        background.drawString(softwareInfo, 10, 30);
        String urlInfo = "Listen to this playlist: " + PlaylistIDManager.currentURL;
        resizeFontToDrawString(background, urlInfo, font, 10, 50);

        g.drawImage(section, 0, COLLAGE_Y - FOOTER_HEIGHT, null);
    }
}
